.TH "Robot" 3 "Tue Jul 22 2014" "Version 1.0" "Cubeception" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Robot \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Robot\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRobot\fP (uint8_t mpuAddr, uint8_t pwmU1Addr, uint8_t pwmU2Addr, double pidOutputXKP, double pidOutputXKI, double pidOutputXKD, double pidOutputXKF, double pidOutputYKP, double pidOutputYKI, double pidOutputYKD, double pidOutputYKF, double pidDepthKP, double pidDepthKI, double pidDepthKD, double pidDepthKF, double pidAngleKP, double pidAngleKI, double pidAngleKD, double pidAngleKF, double dispXYRatio, double verticalCombinerRatio, double horizontalCombinerRatio, double outputScaleXY, double outputScaleZ, double outputOffsetZ)"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBsetMotion\fP (int8_t velX, int8_t velY, int8_t velZ, int8_t rotX, int8_t rotY, int8_t rotZ, int16_t posZ, int8_t torpedoCtl, int8_t servoCtl[6], uint8_t mode)"
.br
.ti -1c
.RI "void \fBcontinueMotion\fP ()"
.br
.ti -1c
.RI "void \fBstop\fP ()"
.br
.ti -1c
.RI "void \fBcalibrate\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Reads sensor data, calculates motor outputs, sets actuators 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Robot::Robot (uint8_tmpuAddr, uint8_tpwmU1Addr, uint8_tpwmU2Addr, doublepidOutputXKP, doublepidOutputXKI, doublepidOutputXKD, doublepidOutputXKF, doublepidOutputYKP, doublepidOutputYKI, doublepidOutputYKD, doublepidOutputYKF, doublepidDepthKP, doublepidDepthKI, doublepidDepthKD, doublepidDepthKF, doublepidAngleKP, doublepidAngleKI, doublepidAngleKD, doublepidAngleKF, doubledispXYRatio, doubleverticalCombinerRatio, doublehorizontalCombinerRatio, doubleoutputScaleXY, doubleoutputScaleZ, doubleoutputOffsetZ)"
Constructor
.PP
\fBParameters:\fP
.RS 4
\fImpuAddr\fP I2C address of MPU9150 
.br
\fIpwmU1Addr\fP I2C address of PCA9685 on U1 
.br
\fIpwmU2Addr\fP I2C address of PCA9685 on U2 
.br
\fIpidOutputXKP\fP Kp for output X \fBPID\fP controller 
.br
\fIpidOutputXKI\fP Ki for output X \fBPID\fP controller 
.br
\fIpidOutputXKD\fP Kd for output X \fBPID\fP controller 
.br
\fIpidOutputXKF\fP Kf for output X \fBPID\fP controller 
.br
\fIpidOutputYKP\fP Kp for output Y \fBPID\fP controller 
.br
\fIpidOutputYKI\fP Ki for output Y \fBPID\fP controller 
.br
\fIpidOutputYKD\fP Kd for output Y \fBPID\fP controller 
.br
\fIpidOutputYKF\fP Kf for output Y \fBPID\fP controller 
.br
\fIpidDepthKP\fP Kp for depth \fBPID\fP controller 
.br
\fIpidDepthKI\fP Ki for depth \fBPID\fP controller 
.br
\fIpidDepthKD\fP Kd for depth \fBPID\fP controller 
.br
\fIpidDepthKF\fP Kf for depth \fBPID\fP controller 
.br
\fIpidAngleKP\fP Kp for angle Z \fBPID\fP controller 
.br
\fIpidAngleKI\fP Ki for angle Z \fBPID\fP controller 
.br
\fIpidAngleKD\fP Kd for angle Z \fBPID\fP controller 
.br
\fIpidAngleKF\fP Kf for angle Z \fBPID\fP controller 
.br
\fIdispXYRatio\fP Complementary filter ratio 
.br
\fIverticalCombinerRatio\fP Vertical combiner ratio 
.br
\fIhorizontalCombinerRatio\fP Horizontal combiner ratio 
.br
\fIoutputScaleXY\fP Scale in XY direction 
.br
\fIoutputScaleZ\fP Scale in Z direction 
.br
\fIoutputOffsetZ\fP Offset in Z direction
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Robot::begin (void)"
Initializes I2C bus, sensors, actuators 
.SS "void Robot::calibrate ()"
Calculates gyro offsets 
.SS "void Robot::continueMotion ()"
Continues previously set motion 
.SS "void Robot::setMotion (int8_tvelX, int8_tvelY, int8_tvelZ, int8_trotX, int8_trotY, int8_trotZ, int16_tposZ, int8_ttorpedoCtl, int8_tservoCtl[6], uint8_tmode)"
Input to create desired motion
.PP
\fBParameters:\fP
.RS 4
\fIvelX\fP Velocity X 
.br
\fIvelY\fP Velocity Y 
.br
\fIvelZ\fP Velocity Z 
.br
\fIrotX\fP Rotation X 
.br
\fIrotY\fP Rotation Y 
.br
\fIrotZ\fP Rotation Z 
.br
\fIposZ\fP Position Z 
.br
\fItorpedoCtl\fP Torpedo control 
.br
\fIservoCtl\fP Servo control 
.br
\fImode\fP Mode control 
.RE
.PP

.SS "void Robot::stop ()"
Brings all motors to a halt 

.SH "Author"
.PP 
Generated automatically by Doxygen for Cubeception from the source code\&.
